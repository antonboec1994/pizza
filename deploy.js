const http = require('http');
const { exec } = require('child_process');
const crypto = require('crypto');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è pizza!
const PORT = 3001;
const WEBHOOK_SECRET = 'supersecrettoken123'; // –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å GitHub
const REPO_DIR = '/root/pizza';

http
	.createServer((req, res) => {
		let body = '';

		req.on('data', chunk => {
			body += chunk.toString();
		});

		req.on('end', () => {
			const url = new URL(req.url, `http://${req.headers.host}`);
			console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ ${url.pathname}`);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–µ–±—Ö—É–∫ –æ—Ç GitHub
			if (url.pathname === '/deploy') {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (X-Hub-Signature-256)
				const signature = req.headers['x-hub-signature-256'];
				if (!verifySignature(body, signature, WEBHOOK_SECRET)) {
					console.log('üö´ –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å');
					res.writeHead(401);
					return res.end('Unauthorized');
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ push –≤ main
				const payload = JSON.parse(body);
				if (payload.ref !== 'refs/heads/main') {
					console.log('üö´ –ù–µ –≤ –≤–µ—Ç–∫—É main ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
					res.writeHead(200);
					return res.end('Ignored');
				}

				console.log('‚úÖ –í–µ–±—Ö—É–∫ –≤–µ—Ä–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –¥–µ–ø–ª–æ–π...');

				const commands = [
					`cd ${REPO_DIR}`,
					'git reset --hard HEAD', // –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
					'git checkout .', // –æ—Ç–∫–∞—Ç –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
					'git pull origin main', // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
					'cd frontend',
					'npm install',
					'npm run build',
					'cd ..',
					'rm -rf /var/www/pizza/*',
					'mkdir -p /var/www/pizza',
					'cp -r frontend/dist/* /var/www/pizza/',
					'cd backend',
					'pm2 restart pizza',
				];

				const cmd = commands.join(' && ');

				exec(cmd, { cwd: REPO_DIR }, (error, stdout, stderr) => {
					if (error) {
						console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
						console.error(`STDERR: ${stderr}`);
						res.writeHead(500);
						return res.end('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ');
					}

					console.log(`‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω`);
					res.writeHead(200);
					res.end('–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
				});
			} else {
				console.log('üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç');
				res.writeHead(404);
				res.end('Not Found');
			}
		});
	})
	.listen(PORT, '0.0.0.0', () => {
		console.log(`üì° –î–µ–ø–ª–æ–π-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://–≤–∞—à-—Å–µ—Ä–≤–µ—Ä:${PORT}/deploy`);
	});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ GitHub
function verifySignature(payload, signature, secret) {
	if (!signature) return false;
	const expected =
		'sha256=' +
		crypto.createHmac('sha256', secret).update(payload).digest('hex');
	return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expected));
}
